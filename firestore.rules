rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow access to authenticated users for all collections by default
    match /{collection}/{docId} {
      allow read, write: if request.auth != null;
    }
    
    // Special case for test_connection collection
    match /test_connection/{docId} {
      allow read: if true;
    }
    
    // Allow access to user profiles - more permissive for debugging
    match /users/{userId} {
      allow read, write: if request.auth != null;
    }

    // Apartments - simplified access control
    match /apartments/{apartmentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
    }

    // Helper function to check if user has access to apartment  
    function hasApartmentAccess() {
      return request.auth != null;
    }

    function hasApartmentPermission() {
      return request.auth != null;
    }

    // Bookings - apartment-based access
    match /bookings/{bookingId} {
      allow read: if hasApartmentAccess();
      allow create: if request.auth != null && hasApartmentPermission();
      allow update: if hasApartmentPermission();
      allow delete: if hasApartmentPermission();
    }

    // Guests - apartment-based access
    match /guests/{guestId} {
      allow read: if hasApartmentAccess();
      allow create: if request.auth != null && hasApartmentPermission();
      allow update: if hasApartmentPermission();
      allow delete: if hasApartmentPermission();
    }

    // Tasks - apartment-based access
    match /tasks/{taskId} {
      allow read: if hasApartmentAccess();
      allow create: if request.auth != null && hasApartmentPermission();
      allow update: if hasApartmentPermission();
      allow delete: if hasApartmentPermission();
    }

    // Inventory - apartment-based access
    match /inventory/{inventoryId} {
      allow read: if hasApartmentAccess();
      allow create: if request.auth != null && hasApartmentPermission();
      allow update: if hasApartmentPermission();
      allow delete: if hasApartmentPermission();
    }

    // Finances - apartment-based access
    match /finances/{financeId} {
      allow read: if hasApartmentAccess();
      allow create: if request.auth != null && hasApartmentPermission();
      allow update: if hasApartmentPermission();
      allow delete: if hasApartmentPermission();
    }

    // Maintenance - apartment-based access
    match /maintenance/{maintenanceId} {
      allow read: if hasApartmentAccess();
      allow create: if request.auth != null && hasApartmentPermission();
      allow update: if hasApartmentPermission();
      allow delete: if hasApartmentPermission();
    }

    // Reminders - apartment-based access
    match /reminders/{reminderId} {
      allow read: if hasApartmentAccess();
      allow create: if request.auth != null && hasApartmentPermission();
      allow update: if hasApartmentPermission();
      allow delete: if hasApartmentPermission();
    }

    // Projects collection - allow authenticated users to create and access projects
    match /projects/{projectId} {
      allow read, write: if request.auth != null;
    }

    // Chat messages - allow authenticated users full access to collection and documents
    match /projects/{projectId}/messages {
      allow read, write: if request.auth != null;
      
      match /{messageId} {
        allow read, write, delete: if request.auth != null;
      }
    }

    // Legacy tenants collection - for migration purposes only
    match /tenants/{tenantId} {
      allow read: if request.auth != null && request.auth.uid == tenantId;
      allow write: if request.auth != null && request.auth.uid == tenantId;
    }
  }
} 